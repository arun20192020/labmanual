#pro3



import csv
import numpy as np
with open('candidate.csv','r') as f:
    reads=csv.reader(f)
    tmp_lst=np.array(list(reads))
concept=np.array(tmp_lst[:,:-1])
target=np.array(tmp_lst[:,-1])
for i in range(len(target)):
    if(target[i]=='yes'):
        specific_h=concept[i]
        break
h=[]
generic_h=[['?' for i in range (len(specific_h))]for i in range (len(specific_h))]
print(type(generic_h))

for i in range(len(target)):
    if(target[i]=='yes'):
        for j in range (len(specific_h)):
            if(specific_h[j]!=concept[i][j]):
                specific_h[j]='?'
                generic_h[j][j]='?'
    else:
        for j in range(len(specific_h)):
            if(specific_h[j]!=concept[i][j]):
                generic_h[j][j]=specific_h[j]
            else:
                generic_h[j][j]='?'
    print("Step ",i+1)
    print("The most generic is : ",generic_h)
    print("The most specific is : ",specific_h)
    
    
    
    
    #pro6
    
    
import csv 
import random
import math
def loadCsv(filename):
	lines = csv.reader(open(filename, "r"));
	dataset = list(lines)
	for i in range(len(dataset)):
		dataset[i] = [float(x) for x in dataset[i]]
	return dataset
def splitDataset(dataset, splitRatio):
	trainSize = int(len(dataset) * splitRatio);
	trainSet = []
	copy = list(dataset);
	while len(trainSet) < trainSize:
		index = random.randrange(len(copy));
		trainSet.append(copy.pop(index))
	return [trainSet, copy]
def separateByClass(dataset):
	separated = {}
	for i in range(len(dataset)):
		vector = dataset[i]
		if (vector[-1] not in separated):
			separated[vector[-1]] = []
		separated[vector[-1]].append(vector)
	return separated
def mean(numbers):
	return sum(numbers)/float(len(numbers))
def stdev(numbers):
	avg = mean(numbers)
	variance = sum([pow(x-avg,2) for x in numbers])/float(len(numbers)-1)
	return math.sqrt(variance)
def summarize(dataset):
	summaries = [(mean(attribute), stdev(attribute)) for attribute in zip(*dataset)];
	del summaries[-1]
	return summaries
def summarizeByClass(dataset):
	separated=separateByClass(dataset)
	summaries={}
	for classValue, instances in separated.items():
		summaries[classValue]=summarize(instances)
	return summaries
def calculateProbability(x,mean,stdev):
	exponent = math.exp(-(math.pow(x-mean,2)/(2*math.pow(stdev,2))))
	return (1 / (math.sqrt(2*math.pi) * stdev)) * exponent
def calculateClassProbabilities(summaries, inputVector):
	probabilities = {}
	for classValue, classSummaries in summaries.items():
		probabilities[classValue] = 1
		for i in range(len(classSummaries)):
			mean, stdev = classSummaries[i]
			x = inputVector[i]
			probabilities[classValue] *= calculateProbability(x, mean,stdev); 
		return probabilities
def predict(summaries, inputVector):
	probabilities = calculateClassProbabilities(summaries, inputVector)
	bestLabel, bestProb = None, -1
	for classValue, probability in probabilities.items():
		if bestLabel is None or probability > bestProb:
			bestProb = probability
			bestLabel=classValue
	return bestLabel
def getPredictions(summaries,testSet):
	predictions = []
	for i in range(len(testSet)):
		result = predict(summaries, testSet[i])
		predictions.append(result)
	return predictions
def getAccuracy(testSet, predictions):
	correct = 0
	for i in range(len(testSet)):
		if testSet[i][-1] == predictions[i]:
			correct += 1
	return (correct/float(len(testSet))) * 100.0
def main():
	filename="Bayesian_classifier.csv"
	splitRatio=0.67
	dataset=loadCsv(filename)
	trainingSet,testSet=splitDataset(dataset,splitRatio)
	print('Split{0} rows into train{1} and test={2}rows'.format(len(dataset),len(trainingSet),len(testSet)))
	summaries = summarizeByClass(trainingSet);
	predictions=getPredictions(summaries,testSet)
	accuracy=getAccuracy(testSet,predictions)
	print('accuracy of the classifier is:{0}%'.format(accuracy))
main()



#pro7



from sklearn.cluster import KMeans

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
data=pd.read_csv("EM_Algorithm.csv")
df1=pd.DataFrame(data)
print(df1)
f1 = df1['Distance_Feature'].values
f2 = df1['Speeding_Feature'].values
X=np.matrix(list(zip(f1,f2)))
plt.plot()
plt.xlim([0, 100])
plt.ylim([0, 50])
plt.title('Dataset')
plt.ylabel('speeding_feature')
plt.xlabel('Distance_Feature')
plt.scatter(f1,f2)
plt.show()
plt.plot()
colors = ['b', 'g', 'r']
markers = ['o', 'v', 's']
kmeans_model = KMeans(n_clusters=3).fit(X)
plt.plot()
for i, l in enumerate(kmeans_model.labels_):
	plt.plot(f1[i], f2[i], color=colors[l], marker=markers[l],ls='None')
	plt.xlim([0, 100])
	plt.ylim([0, 50])
plt.show()



#pro8




from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report, confusion_matrix

from sklearn import datasets
iris=datasets.load_iris()
iris_data=iris.data
iris_labels=iris.target
print(iris_data)
print(iris_labels)
x_train, x_test, y_train, y_test=train_test_split(iris_data,iris_labels,test_size=0.30)

classifier=KNeighborsClassifier(n_neighbors=5)
classifier.fit(x_train,y_train)
y_pred=classifier.predict(x_test)
print('confusion matrix is as follows')
print(confusion_matrix(y_test,y_pred))
print('Accuracy metrics')
print(classification_report(y_test,y_pred))



#pro9



from numpy import *
import operator
from os import listdir
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
import numpy as np1
import numpy.linalg as np
from scipy.stats.stats import pearsonr
def kernel(point,xmat, k):
    m,n = np1.shape(xmat)
    weights = np1.mat(np1.eye((m)))
    for j in range(m):
        diff = point - X[j]
        weights[j,j] = np1.exp(diff*diff.T/(-2.0*k**2))
    return weights
def localWeight(point,xmat,ymat,k):
    wei = kernel(point,xmat,k)
    W=(X.T*(wei*X)).I*(X.T*(wei*ymat.T))
    return W
def localWeightRegression(xmat,ymat,k):
    m,n = np1.shape(xmat)
    ypred = np1.zeros(m)
    for i in range(m):
        ypred[i] = xmat[i]*localWeight(xmat[i],xmat,ymat,k)
    return ypred

data = pd.read_csv('10data.csv')
bill = np1.array(data.total_bill)
tip = np1.array(data.tip)

mbill = np1.mat(bill)
mtip = np1.mat(tip)
m= np1.shape(mbill)[1]
one = np1.mat(np1.ones(m))
X= np1.hstack((one.T,mbill.T))

ypred = localWeightRegression(X,mtip,2)
SortIndex = X[:,1].argsort(0)
xsort = X[SortIndex][:,0]
fig = plt.figure()
ax = fig.add_subplot(1,1,1)
ax.scatter(bill,tip, color='green')
ax.plot(xsort[:,1],ypred[SortIndex], color = 'red', linewidth=5)
plt.xlabel('Total bill')
plt.ylabel('Tip')
plt.show();





